import { createPublicClient, http } from "viem";
import { SIGNER } from "./utils/clients/wallet";
import { UNISWAP_ROUTER } from "./utils/contracts/uniswap";
import { sendTransaction } from "./utils/transaction";
import { base } from "viem/chains";

const testClient = createPublicClient({
  chain: base,
  transport: http("https://base-rpc.publicnode.com"),
});

const uniTest = { ...UNISWAP_ROUTER, client: testClient };

const INPUT = [
  "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000",
  "0x000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000005af3107a4000000000000000000000000000000000000000000000000000045aec3c21f8a51600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002b42000000000000000000000000000000000000060001f450c5725949a6f0c72e6c4a641f24049a917db0cb000000000000000000000000000000000000000000",
  "0x00000000000000000000000050c5725949a6f0c72e6c4a641f24049a917db0cb000000000000000000000000067170777ba8027ced27e034102d54074d062d710000000000000000000000000000000000000000000000000000000000000019",
  "0x00000000000000000000000050c5725949a6f0c72e6c4a641f24049a917db0cb0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000045aec3c21f8a516",
] as `0x${string}`[];

// ETH -> DAI
export async function uniswap() {
  console.log("Swap started !!");
  const deadline = BigInt(Math.floor(Date.now() / 1000)) + BigInt(60 * 5);

  const { request } = await uniTest.simulate.execute(
    ["0x0b000604", INPUT, deadline],
    { account: SIGNER.account }
  );

  console.log("Swap...");
  await sendTransaction(request, SIGNER);
}

uniswap();
